<!DOCTYPE html>
<html lang="en">
    <head>
        <title>Tab Example</title>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css">
		<script type="application/javascript" src="/js/partial.js"></script>
    </head>

    <body>
        <div id="content">
            {{ child "content" }}
        </div>

        <div class="mt-3 container">
            <div>(rendered on load at : {{ formatDate now "15:04:05" }})</div>
        <div class="mt-3">What the handler looks like: </div>

        <pre class="mt-3 p-1" style="background-color: gray"><small>func (a *App) home(w http.ResponseWriter, r *http.Request) {
	// the tabs for this page.
	selectMap := map[string]*partial.Partial{
		"tab1": partial.New("tab1.gohtml"),
		"tab2": partial.New("tab2.gohtml"),
		"tab3": partial.New("tab3.gohtml"),
	}

	// layout, footer, index could be abstracted away and shared over multiple handlers within the same module, for instance.
	layout := a.PartialService.NewLayout()
	footer := partial.NewID("footer", "footer.gohtml")
	index := partial.NewID("index", "index.gohtml").WithOOB(footer)

	content := partial.NewID("content", "content.gohtml").WithSelectMap("tab1", selectMap)

	// set the layout content and wrap it with the main template
	layout.Set(content).Wrap(index)

	err := layout.WriteWithRequest(r.Context(), w, r)
	if err != nil {
		http.Error(w, fmt.Errorf("error rendering layout: %w", err).Error(), http.StatusInternalServerError)
	}
}</small></pre>
        </div>

        {{ child "footer" }}

    <script>
        // Initialize the handler with optional configuration
        const partial = new Partial();
    </script>
    </body>
</html>