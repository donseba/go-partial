<!DOCTYPE html>
<html lang="en">
    <head>
        <title>Infinite Scroll</title>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css">
		<script type="application/javascript" src="/js/partial.js"></script>
    </head>

    <body>


        <div class="mt-3 container">
            <div>(rendered on load at : {{ formatDate now "15:04:05" }})</div>
        <div class="mt-3">What the handler looks like: </div>

        <pre class="mt-3 p-1" style="background-color: gray"><small>func (a *App) home(w http.ResponseWriter, r *http.Request) {
	// layout, footer, index could be abstracted away and shared over multiple handlers within the same module, for instance.
	layout := a.PartialService.NewLayout()
	footer := partial.NewID("footer", filepath.Join("templates", "footer.gohtml"))
	index := partial.NewID("index", filepath.Join("templates", "index.gohtml")).WithOOB(footer)

	content := partial.NewID("content", filepath.Join("templates", "content.gohtml")).WithAction(func(ctx context.Context, p *partial.Partial, data *partial.Data) (*partial.Partial, error) {
		switch p.GetRequestedAction() {
		case "infinite-scroll":
			return handleInfiniteScroll(p, data)
		default:
			return p, nil
		}
	})

	// set the layout content and wrap it with the main template
	layout.Set(content).Wrap(index)

	err := layout.WriteWithRequest(r.Context(), w, r)
	if err != nil {
		http.Error(w, fmt.Errorf("error rendering layout: %w", err).Error(), http.StatusInternalServerError)
	}
}</small></pre>
        </div>

		{{ child "footer" }}

		<div class="mt-3 container" id="content" x-infinite-scroll="true" x-get="/" x-swap="beforeend">
			{{ child "content" }}
		</div>

    <script>
        // Initialize the handler with optional configuration
        const partial = new Partial();
    </script>
    </body>
</html>