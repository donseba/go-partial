<div class="container mt-5">
    <!-- Tab Navigation -->
    <ul class="nav nav-tabs" role="tablist">
        <li class="nav-item">
            <span class="nav-link {{ ifRequestedSelect "active" "tab1" ""}}" style="cursor:pointer;" hx-get="/" hx-target="#content" x-select="tab1">Tab 1</span>
        </li>
        <li class="nav-item">
            <span class="nav-link {{ ifRequestedSelect "active" "tab2"}}" style="cursor:pointer;" hx-get="/" hx-target="#content" x-select="tab2">Tab 2</span>
        </li>
        <li class="nav-item">
            <span class="nav-link {{ ifRequestedSelect "active" "tab3"}}" style="cursor:pointer;" hx-get="/" hx-target="#content" x-select="tab3">Tab 3</span>
        </li>
    </ul>

    <div class="mt-3">
        {{ selection }}
    </div>

    <div class="mt-3">The handler:</div>

        <pre class="mt-3 p-1" style="background-color: gray"><small>func (a *App) home(w http.ResponseWriter, r *http.Request) {
	// the tabs for this page.
	selectMap := map[string]*partial.Partial{
		"tab1": partial.New("tab1.gohtml"),
		"tab2": partial.New("tab2.gohtml"),
		"tab3": partial.New("tab3.gohtml"),
	}

	// layout, footer, index could be abstracted away and shared over multiple handlers within the same module, for instance.
	layout := a.PartialService.NewLayout()
	footer := partial.NewID("footer", "footer.gohtml")
	index := partial.NewID("index", "index.gohtml").WithOOB(footer)

	content := partial.NewID("content", "content.gohtml").WithSelectMap("tab1", selectMap)

	// set the layout content and wrap it with the main template
	layout.Set(content).Wrap(index)

	err := layout.WriteWithRequest(r.Context(), w, r)
	if err != nil {
		http.Error(w, fmt.Errorf("error rendering layout: %w", err).Error(), http.StatusInternalServerError)
	}
}</small></pre>
</div>